name: Task Synchronization

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        type: choice
        options:
          - create-issues-from-tasks
          - sync-task-status
          - export-tasks-to-project
      milestone:
        description: 'Milestone name (for create-issues-from-tasks)'
        required: false
        type: string
      dry-run:
        description: 'Dry run (preview only)'
        required: false
        type: boolean
        default: true

jobs:
  create-issues-from-tasks:
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'create-issues-from-tasks'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Create Issues from Tasks
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // This would read from a task file or API
            // For now, we'll create a placeholder implementation
            
            const dryRun = '${{ github.event.inputs.dry-run }}' === 'true';
            const milestone = '${{ github.event.inputs.milestone }}';
            
            console.log(`Creating issues from tasks (dry-run: ${dryRun})`);
            
            // Example task structure - in real implementation, this would come from task management system
            const exampleTasks = [
              {
                id: 'auth-001',
                title: 'Implement OAuth 2.0 Integration',
                description: 'Add OAuth 2.0 support for badge provider authentication',
                component: 'Authentication',
                priority: 'High',
                estimate: '1 week'
              }
            ];
            
            for (const task of exampleTasks) {
              const issueBody = `
            ### Task ID
            ${task.id}
            
            ### Component
            ${task.component}
            
            ### Description
            ${task.description}
            
            ### Priority
            ${task.priority}
            
            ### Time Estimate
            ${task.estimate}
            
            ### Acceptance Criteria
            - [ ] Implementation completed
            - [ ] Tests added and passing
            - [ ] Documentation updated
            - [ ] Code review completed
            `;
            
              if (dryRun) {
                console.log(`Would create issue: ${task.title}`);
                console.log(`Body: ${issueBody}`);
              } else {
                const issue = await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: `[TASK] ${task.title}`,
                  body: issueBody,
                  labels: ['task', `component: ${task.component.toLowerCase().replace(' ', '-')}`, `priority: ${task.priority.toLowerCase()}`],
                  milestone: milestone ? (await github.rest.issues.listMilestones({
                    owner: context.repo.owner,
                    repo: context.repo.repo
                  })).data.find(m => m.title === milestone)?.number : undefined
                });
                
                console.log(`Created issue #${issue.data.number}: ${task.title}`);
              }
            }
            
  sync-task-status:
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'sync-task-status'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Sync Task Status
        uses: actions/github-script@v7
        with:
          script: |
            const dryRun = '${{ github.event.inputs.dry-run }}' === 'true';
            
            console.log(`Syncing task status (dry-run: ${dryRun})`);
            
            // Get all open issues with task IDs
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'task'
            });
            
            for (const issue of issues.data) {
              const taskIdMatch = issue.body?.match(/### Task ID\s*\n\s*([^\n]+)/);
              if (taskIdMatch) {
                const taskId = taskIdMatch[1].trim();
                console.log(`Found task ID ${taskId} in issue #${issue.number}`);
                
                // In real implementation, this would sync with task management system
                if (!dryRun) {
                  // Update task status based on issue state
                  console.log(`Would update task ${taskId} status based on issue #${issue.number}`);
                }
              }
            }
            
  export-tasks-to-project:
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'export-tasks-to-project'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Export Tasks to Project
        uses: actions/github-script@v7
        with:
          script: |
            const dryRun = '${{ github.event.inputs.dry-run }}' === 'true';
            
            console.log(`Exporting tasks to project (dry-run: ${dryRun})`);
            
            // This would export task hierarchy to GitHub Projects
            // Implementation would depend on the specific project structure needed
            
            if (dryRun) {
              console.log('Would export task hierarchy to GitHub Projects');
            } else {
              console.log('Exporting task hierarchy to GitHub Projects...');
              // Actual export implementation would go here
            }
